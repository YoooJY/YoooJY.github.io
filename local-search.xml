<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode题解_链表</title>
    <link href="/2021/07/30/Leetcode%E9%A2%98%E8%A7%A3-%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/07/30/Leetcode%E9%A2%98%E8%A7%A3-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode题解-链表"><a href="#Leetcode题解-链表" class="headerlink" title="Leetcode题解_链表"></a>Leetcode题解_链表</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><blockquote><p>简单</p></blockquote><ul><li>No234 回文链表</li><li>No83 删除排序链表中的重复元素</li><li>No21 合并两个有序链表</li><li>No206 反转链表</li><li>No160 相交链表</li></ul><blockquote><p>中等</p></blockquote><ul><li>No328 奇偶链表</li><li>No725 分隔链表</li><li>No445 两数相加II</li><li>No24 两两交换链表中的结点</li><li>No19 删除链表的倒数第N个结点</li></ul><hr><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><strong>No234.回文链表</strong></li></ol><blockquote><p>题目描述</p></blockquote><p>请判断一个链表是否为回文链表。</p><p>示例 1:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span><br>输出: <span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span><br>输出: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>进阶：<br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><blockquote><p>分析与解答</p></blockquote><p>本题可使用栈结构或快慢指针求解</p><p><strong>法一：栈结构</strong></p><p>step1：将链表结点值依次压入栈中</p><p>step2：出栈与链表比较</p><p>step3：相同则返回true</p><p><strong>图解：</strong></p><p><img src="C:\blog\source_posts\Leetcode题解-链表\BA0ADA46EDE1F3DB6DBD9A443006F3CC.png" alt="BA0ADA46EDE1F3DB6DBD9A443006F3CC"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//栈存储</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-comment">//压栈</span><br>    <span class="hljs-keyword">for</span> (ListNode pNode=head;pNode!=<span class="hljs-keyword">null</span>;pNode=pNode.next)&#123;<br>        stack.add(pNode.val);<br>    &#125;<br>    <span class="hljs-comment">//出栈比较</span><br>    <span class="hljs-keyword">for</span> (ListNode pNode=head;pNode!=<span class="hljs-keyword">null</span>;pNode=pNode.next)&#123;<br>        <span class="hljs-keyword">if</span> (pNode.val!=stack.pop())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：O(n)</p><p>空间负责度：O(n)</p><p><strong>法二：快慢指针</strong></p><p>该方法要点在于将链表分成前后两份，将两份进行比较，最后再还原链表结构。</p><p>step1：使用快慢指针分割链表</p><p>step2：反转后部分链表</p><p>step3：将两链表进行比较</p><p>step4：还原链表</p><p>step5：返回结果</p><p><strong>图解：</strong></p><p><img src="C:\blog\source_posts\Leetcode题解-链表\2D1257AA62318E200F13DB777A75F3A8.png" alt="2D1257AA62318E200F13DB777A75F3A8"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode firstHalfEnd = endOfFirst(head);<br>    ListNode secondHalfStart =reverseList(firstHalfEnd.next);<br><br>    ListNode p1 = head;<br>    ListNode p2 = secondHalfStart;<br>    <span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">while</span> (p2!=<span class="hljs-keyword">null</span>&amp;&amp;result)&#123;<br>        <span class="hljs-keyword">if</span> (p1.val != p2.val)&#123;<br>            result = <span class="hljs-keyword">false</span>;<br>        &#125;<br>        p1 = p1.next;<br>        p2 = p2.next;<br>    &#125;<br><br>    firstHalfEnd.next = reverseList(secondHalfStart);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">endOfFirst</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    ListNode fast = head;<br>    ListNode slow = head;<br>    <span class="hljs-keyword">while</span> (fast.next!=<span class="hljs-keyword">null</span> &amp;&amp; fast.next.next!=<span class="hljs-keyword">null</span>)&#123;<br>        fast = fast.next.next;<br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    ListNode prev = <span class="hljs-keyword">null</span>;<br>    ListNode cur = head;<br>    <span class="hljs-keyword">while</span> (cur!=<span class="hljs-keyword">null</span>)&#123;<br>        ListNode nextTemp = cur.next;<br>        cur.next = prev;<br>        prev = cur;<br>        cur = nextTemp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><hr><ol start="2"><li><strong>No83 删除排序链表中的重复元素</strong></li></ol><blockquote><p>题目描述</p></blockquote><p>存在一个按升序排列的链表，给你这个链表的头节点 head，请你删除所有重复的元素，使每个元素只出现一次 。</p><p>返回同样按升序排列的结果链表。</p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,1,2]</span><br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,1,2,3,3]</span><br>输出：<span class="hljs-comment">[1,2,3]</span><br></code></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode curr = head;<br>    <span class="hljs-comment">//指针没走到尾部</span><br>    <span class="hljs-keyword">while</span> (curr!=<span class="hljs-keyword">null</span> &amp;&amp; curr.next!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//若当前结点值=下一个节点值</span><br>        <span class="hljs-keyword">if</span> (curr.val==curr.next.val)&#123;<br>            <span class="hljs-comment">//将当前结点的next指针指向下一个的下一个</span><br>            curr.next = curr.next.next;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//若不相等则继续向后遍历</span><br>            curr=curr.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="3"><li><strong>No21 合并两个有序链表</strong></li></ol><blockquote><p>题目描述</p></blockquote><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[1,2,4]</span>, l2 = <span class="hljs-comment">[1,3,4]</span><br>输出：<span class="hljs-comment">[1,1,2,3,4,4]</span><br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>    <span class="hljs-comment">//终止条件</span><br>    <span class="hljs-keyword">if</span> (l1==<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l2==<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br>    <span class="hljs-comment">//递归</span><br>    <span class="hljs-keyword">if</span> (l1.val&lt;l2.val)&#123;<br>        l1.next = mergeTwoLists(l1.next,l2);<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        l2.next = mergeTwoLists(l2.next,l1);<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="4"><li>No206 反转链表</li></ol><blockquote><p>题目描述</p></blockquote><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><p>示例 1：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[2,1]</span><br></code></pre></td></tr></table></figure><p><strong>法一：迭代</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    ListNode prev = <span class="hljs-keyword">null</span>;<br>    ListNode curr = head;<br>    <span class="hljs-comment">//当当前节点不为空</span><br>    <span class="hljs-keyword">while</span> (curr!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//将next指向上一个节点</span><br>        ListNode nextTemp = curr.next;<br>        curr.next = prev;<br>        <span class="hljs-comment">//移动指针</span><br>        prev = curr;<br>        curr = nextTemp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>法二：递归</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList2</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    <span class="hljs-comment">//终止条件</span><br>    <span class="hljs-comment">//链表为空或仅有一个节点</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>||head.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">//递</span><br>    ListNode p = reverseList2(head.next);<br>    <span class="hljs-comment">//归</span><br>    head.next.next = head;<br>    head.next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="5"><li>No160 相交链表</li></ol><blockquote><p>题目描述</p></blockquote><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><p>示例 1：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：intersectVal = <span class="hljs-number">8</span>, listA = [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>], listB = [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], skipA = <span class="hljs-number">2</span>, skipB = <span class="hljs-number">3</span><br>输出：Intersected at &#x27;<span class="hljs-number">8</span>&#x27;<br>解释：相交节点的值为 <span class="hljs-number">8</span> （注意，如果两个链表相交则不能为 <span class="hljs-number">0</span>）。<br>从各自的表头开始算起，链表 <span class="hljs-keyword">A</span> 为 [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>]，链表 B 为 [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]。<br>在 <span class="hljs-keyword">A</span> 中，相交节点前有 <span class="hljs-number">2</span> 个节点；在 B 中，相交节点前有 <span class="hljs-number">3</span> 个节点。<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA ,ListNode headB)</span></span>&#123;<br>    ListNode l1 = headA;<br>    ListNode l2 = headB;<br>    <span class="hljs-keyword">while</span> (l1!=l2)&#123;<span class="hljs-comment">//指针未重合时</span><br>        <span class="hljs-comment">//如果遍历完A/B链表，则转向从B/A头部开始遍历</span><br>        <span class="hljs-comment">//如果没有遍历完，则继续遍历</span><br>        l1=(l1==<span class="hljs-keyword">null</span>)?headB:l1.next;<br>        l2=(l2==<span class="hljs-keyword">null</span>)?headA:l2.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l1;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="6"><li>No328 奇偶链表</li></ol><blockquote><p>题目描述</p></blockquote><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><p>示例 1:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL<br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">4</span>-&gt;NULL<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">7</span>-&gt;NULL <br>输出: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">6</span>-&gt;<span class="hljs-number">7</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;NULL<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">oddEvenList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">//如果链表为空直接返回头</span><br>    <span class="hljs-keyword">if</span>(head==<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">//设置奇遍历指针、偶遍历指针、偶头指针</span><br>    ListNode odd = head;<br>    ListNode evenhead = odd.next;<br>    ListNode even = evenhead;<br>    <span class="hljs-comment">//奇偶指针同时向后移动</span><br>    <span class="hljs-keyword">while</span> (even!=<span class="hljs-keyword">null</span>&amp;&amp;even.next!=<span class="hljs-keyword">null</span>)&#123;<br>        odd.next = even.next;<br>        odd = odd.next;<br>        even.next = odd.next;<br>        even = even.next;<br>    &#125;<br>    <span class="hljs-comment">//偶接到奇后面</span><br>    odd.next = evenhead;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="7"><li>No725 分隔链表</li></ol><blockquote><p>题目描述</p></blockquote><p>给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。</p><p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p><p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p><p>返回一个符合上述规则的链表的列表。</p><p>示例 1：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入: <br>root = <span class="hljs-selector-attr">[1, 2, 3]</span>, k = <span class="hljs-number">5</span><br>输出: <span class="hljs-selector-attr">[[1]</span>,<span class="hljs-selector-attr">[2]</span>,<span class="hljs-selector-attr">[3]</span>,<span class="hljs-selector-attr">[]</span>,<span class="hljs-selector-attr">[]</span>]<br>解释:<br>输入输出各部分都应该是链表，而不是数组。<br>例如, 输入的结点 root 的 val= <span class="hljs-number">1</span>, root<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.val</span> = <span class="hljs-number">2</span>, \root<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.val</span> = <span class="hljs-number">3</span>, 且 root<span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.next</span><span class="hljs-selector-class">.next</span> = null。<br>第一个输出 output<span class="hljs-selector-attr">[0]</span> 是 output<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.val</span> = <span class="hljs-number">1</span>, output<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.next</span> = null。<br>最后一个元素 output<span class="hljs-selector-attr">[4]</span> 为 null, 它代表了最后一个部分为空链表。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: <br>root = <span class="hljs-comment">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>, k = 3<br>输出: <span class="hljs-comment">[<span class="hljs-comment">[1, 2, 3, 4]</span>, <span class="hljs-comment">[5, 6, 7]</span>, <span class="hljs-comment">[8, 9, 10]</span>]</span><br>解释:<br>输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode[] splitListToParts(ListNode head, <span class="hljs-keyword">int</span> k) &#123;<br>    ListNode cur = head;<br>    <span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (cur!=<span class="hljs-keyword">null</span>)&#123;<br>        cur = cur.next;<br>        N++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> width = N/k;<br>    <span class="hljs-keyword">int</span> add = N%k;<br>    ListNode[] ans = <span class="hljs-keyword">new</span> ListNode[k];<br>    cur = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;k ; i++)&#123;<br>        ListNode curhead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode write = curhead;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt;width+(i&lt;add?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>); j++)&#123;<br>            write=write.next=<span class="hljs-keyword">new</span> ListNode(cur.val);<br>            cur = cur.next;<br>        &#125;<br>        ans[i]=curhead.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="8"><li>No445 两数相加II</li></ol><blockquote><p>题目描述</p></blockquote><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p>示例1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[7,2,4,3]</span>, l2 = <span class="hljs-comment">[5,6,4]</span><br>输出：<span class="hljs-comment">[7,8,0,7]</span><br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[2,4,3]</span>, l2 = <span class="hljs-comment">[5,6,4]</span><br>输出：<span class="hljs-comment">[8,0,7]</span><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[0]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>    <span class="hljs-comment">//创建两个空栈存放两个链表</span><br>    Stack&lt;Integer&gt; stack1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    Stack&lt;Integer&gt; stack2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-comment">//压栈</span><br>    <span class="hljs-keyword">while</span> (l1!=<span class="hljs-keyword">null</span>)&#123;<br>        stack1.add(l1.val);<br>        l1 = l1.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (l2!=<span class="hljs-keyword">null</span>)&#123;<br>        stack2.add(l2.val);<br>        l2 = l2.next;<br>    &#125;<br>    <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//相加后链表</span><br>    ListNode after = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> ( !stack1.isEmpty() || !stack2.isEmpty() || carry!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//出栈</span><br>        <span class="hljs-keyword">int</span> temp1 = stack1.isEmpty()?<span class="hljs-number">0</span>:stack1.pop();<br>        <span class="hljs-keyword">int</span> temp2 = stack2.isEmpty()?<span class="hljs-number">0</span>:stack2.pop();<br>        <span class="hljs-keyword">int</span> cur = temp1+temp2+carry;<br>        <span class="hljs-comment">//计算进位</span><br>        carry = cur / <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//计算余数</span><br>        cur = cur % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//头插法</span><br>        ListNode curnode = <span class="hljs-keyword">new</span> ListNode(cur);<br>        curnode.next = after;<br>        after = curnode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> after;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="9"><li>No24 两两交换链表中的结点</li></ol><blockquote><p>题目描述</p></blockquote><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例 1：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>]<br>输出：[<span class="hljs-number">2,1,4,3</span>]<br></code></pre></td></tr></table></figure><p><strong>法一：递归</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">//终止条件</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>||head.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    ListNode next = head.next;<br>    head.next = swapPairs(next.next);<br>    next.next = head;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>法二：迭代</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs2</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    dummyHead.next = head;<br>    ListNode temp = dummyHead;<br>    <span class="hljs-keyword">while</span> (temp.next!=<span class="hljs-keyword">null</span>&amp;&amp;temp.next.next!=<span class="hljs-keyword">null</span>)&#123;<br>        ListNode node1 = temp.next;<br>        ListNode node2 = temp.next.next;<br>        <span class="hljs-comment">//交换过程</span><br>        temp.next = node2;<br>        node1.next = node2.next;<br>        node2.next = node1;<br>        <span class="hljs-comment">//移动temp</span><br>        temp = node1;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummyHead.next;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol start="10"><li>No19 删除链表的倒数第N个结点</li></ol><blockquote><p>题目描述</p></blockquote><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><p>示例 1：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5</span>], n = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">1,2,3,5</span>]<br></code></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    ListNode node1 = head;<br>    ListNode node2 = head;<br>    <span class="hljs-comment">//使node1与node2相隔n-1个结点</span><br>    <span class="hljs-comment">//这里可以少用一个结点 但必须隔n-1个结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;n ; i++)&#123;<br>        node2 = node2.next;<br>    &#125;<br>    <span class="hljs-comment">//说明删除的是头结点</span><br>    <span class="hljs-keyword">if</span> (node2==<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> head.next;<br>    <span class="hljs-comment">//两节点同时向后移</span><br>    <span class="hljs-keyword">while</span> (node2.next!=<span class="hljs-keyword">null</span>)&#123;<br>        node1 = node1.next;<br>        node2 = node2.next;<br>    &#125;<br>    <span class="hljs-comment">//删除倒数第n个结点</span><br>    node1.next = node1.next.next;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2021/07/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2021/07/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="好耶-欢迎来玩"><a href="#好耶-欢迎来玩" class="headerlink" title="好耶 欢迎来玩"></a>好耶 欢迎来玩</h3><p><a href="https://yooojy.github.io/">YoooJY的博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化博客<br>    &gt;hexo init<br>新建文章<br>    &gt;hexo <span class="hljs-keyword">new</span> 文章名<br>在线阅览<br>    &gt;hexo s<br>清理<br>    &gt;hexo c<br>生成<br>    &gt;hexo g<br>部署到远端Github仓库<br>    &gt;hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/25/hello-world/"/>
    <url>/2021/07/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
